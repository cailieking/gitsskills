package com.cdd.back.controllerimport com.github.sommeri.less4j.core.ast.Extend;
import com.cdd.base.domain.AdvCorporationimport com.cdd.base.enums.AdvertisementType
import com.cdd.base.service.OssService;import com.cdd.base.service.common.CRUDServiceimport java.text.SimpleDateFormatimport org.codehaus.groovy.grails.commons.GrailsApplication;import org.hibernate.SQLQueryclass AdvManageController extends BaseController {	CRUDService CRUDService	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd")	int maxSize = 1024 * 1024 * 10			GrailsApplication grailsApplication				OssService ossService
	def shipBottom(){				params.sort = "dateCreated"		params.order = "acs"		def queryHandler = {eq "type",AdvertisementType.ShipBottom}		def result = CRUDService.list(AdvCorporation, params,queryHandler)		def shipBottomList = result?.list.collect {			def data = [:]			data.id = it.id			data.createBy = it.createBy			data.dateCreated = sdf.format(it.dateCreated)			data.image = it.image			data.lastUpdated =sdf.format(it.lastUpdated)			data.order = it.order			data.type = it.type			data.updateBy = it.updateBy			data.content = it.content			data.customName = it.customName			data.contractNumber = it.contractNumber			data.sales = it.sales			data.state = it.state			data.endDate = sdf.format(it.endDate)			data.title = it.title			data.alt = it.alt			data.href = it.href			return data		}		render view:"/shipBottom.gsp",model:[list:shipBottomList]	}	def saveShipBottom(){		println params		AdvCorporation data		if(params.id) {			data = AdvCorporation.get(params.id as Long)		} else {			data = new AdvCorporation()		}		data.type = AdvertisementType.ShipBottom		data.content = "remark"//params.content		data.order = params.order as int		data.title = params.title		data.alt = params.alt		data.href = params.href		data.customName = params.customName		data.contractNumber = params.contractNumber		data.sales = params.sales		if(params.endDate){		data.endDate = sdf.parse(params.endDate)		}		def f = request.getFile('file')		if(f.size <= 0 && !data.image) {			flash.errors = [:]			flash.errors.msgs = ['请上传一张图片']			redirect uri: "/advManage/shipBottom"			return		}		if(f.size > maxSize) {			flash.errors = [:]			flash.errors.msgs = ['图片不能超过10MB']			redirect uri: "/advManage/shipBottom"			return		}		if(f.size > 0) {			String fileName = "files/adv/corporation/" + URLEncoder.encode("${f.fileItem.fileName}", "UTF-8")			//now transfer file//			File fileDest = new File("${grailsApplication.config.appInfo.rootPath}${fileName}")//			fileDest.mkdirs()//			f.transferTo(fileDest)			ossService.uploadFile(f.inputStream, grailsApplication.config.oss.publicbucket,				"files/adv/corporation/" + f.fileItem.fileName)			data.image = fileName		}		data.save()		if(data.hasErrors()) {			flash.errors = data.errors			flash.data = data			redirect uri: "/advManage/shipBottom"		} else {						flash.msgs = ['保存成功']			redirect uri: "/advManage/shipBottom"		}	}	def delete() {			String[] ids = params.ids.split(',(\\s)*')		if(ids) {			def objs = []			for(def id in ids) {				objs << AdvCorporation.get(id as Long)			}			AdvCorporation.deleteAll(objs)			flash.msgs = ['删除成功']		}		redirect uri: "/advManage/shipBottom"			}			def changeStatus(){		/*Query query = session.createQuery(“update Teacher t set t.name = ‘yangtianb’ where id = 3″);		query.executeUpdate();		session.getTransaction().commit();*/		/**		 * 数据库state = 0为启用；state= 1为禁用；		 */		if(params.status=="on"){		SQLQuery query = sessionFactory.getCurrentSession().createSQLQuery("update adv_corporation set state = '0' where type='ShipBottom'")		query.executeUpdate();		//session.getTransaction().commit();		}		if(params.status=="off"){			SQLQuery query = sessionFactory.getCurrentSession().createSQLQuery("update adv_corporation set state = '1' where type='ShipBottom'")			query.executeUpdate();			//session.getTransaction().commit();			}		redirect uri: "/advManage/shipBottom"	}
}
